---
description: 
globs: 
alwaysApply: false
---
# Function Tracking Log

## public/js/paint.js

### redrawCanvasWithVisibility()
**Status**: Modified
**Connection**: Called after image moves, zooms, and on project load
**Changes**: Updated to properly handle label positioning with the new offset system
**Notes**: If label positions are still offset after reloading, check the getCanvasCoords function
**Test**: Need to verify offset behavior on both loaded images and blank canvas

### getCanvasCoords(imageX_relative, imageY_relative)
**Status**: Modified
**Connection**: Used to transform image coordinates to canvas coordinates
**Changes**: Updated to apply position offsets in blank canvas mode
**Notes**: Critical for proper stroke rendering after load and during panning

### applyVisibleStrokes()
**Status**: Modified
**Connection**: Used by redrawCanvasWithVisibility to apply strokes to canvas
**Changes**: Updated to apply position offsets for all types of strokes in blank canvas mode
**Notes**: Handles both vector and freehand strokes

### findOptimalLabelPosition()
**Status**: Modified
**Connection**: Called when creating new labels or redrawing canvas
**Changes**: Removed canvas boundary constraints (commented out)
**Notes**: Now labels can move freely with strokes when panning, even off-screen

### draw()
**Status**: Modified
**Connection**: Core drawing function used during mouse move
**Changes**: Fixed line width scaling to account for image scale
**Notes**: Ensures consistent stroke width regardless of zoom level

### drawStraightLinePreview()
**Status**: Modified
**Connection**: Used for straight line tool preview
**Changes**: Fixed line width and endpoint radius scaling
**Notes**: Ensures consistent stroke appearance across zoom levels

### saveState()
**Status**: Unchanged
**Connection**: Called after drawing or image manipulation
**Notes**: Manages undo/redo history and stroke labeling

### moveImage(deltaX, deltaY)
**Status**: Unchanged
**Connection**: Called when panning image with mouse or keyboard
**Notes**: Updates position offsets which affect stroke rendering

### Curved Arrow Rendering (Final & Preview)
*   **Status:** Fixed (Direction logic corrected). Start arrows point backward along tangent, end arrows point forward along tangent.
*   **Location:** Final rendering ~2511-2518, Preview rendering ~4551-4556, Single point preview ~4518
*   **Connections:** Calls `Math.atan2`, `drawSingleArrowhead`, `calculateTangentFromSplinePoints`
*   **Change History (This Session):**
    *   [Previous Turn] - Added `+ Math.PI` to all curved arrow angle calculations to fix direction.
    *   [Previous Turn] - CORRECTED: Removed `Math.PI` addition - arrows should point in same direction as tangent, not opposite. Also improved canvas clearing in preview to prevent arrow artifacts.
    *   [This Turn] - FINAL FIX: Applied correct tangent orientations: Start arrow uses `Math.atan2(-startTangent.y, -startTangent.x)` (backward), End arrow uses `Math.atan2(endTangent.y, endTangent.x)` (forward). Arrows now point outward from curve as expected.

## public/js/project-manager.js

### saveProject()
**Status**: Unchanged
**Connection**: Called when saving project data
**Notes**: Serializes all canvas data including strokes, scales, and offsets

### loadProject(projectData)
**Status**: Modified
**Connection**: Called when loading project data
**Changes**: Added console logs to verify stroke data loading
**Notes**: Responsible for restoring project state including stroke data

### exportCanvasToImage()
**Status**: Unchanged
**Connection**: Called when exporting canvas as image
**Notes**: Creates visual output of the project

## public/js/app.js

### initCanvas()
**Status**: Unchanged
**Connection**: Called on application startup
**Notes**: Sets up canvas and initial event listeners

### setupTools()
**Status**: Unchanged
**Connection**: Called during initialization
**Notes**: Configures drawing tools and their behaviors

### setupEventListeners()
**Status**: Unchanged
**Connection**: Called during initialization
**Notes**: Sets up UI interaction events 